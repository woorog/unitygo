//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System.Threading.Tasks;
using System.Collections.Generic;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Models;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases;

namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Apis.Releases
{
    /// <summary>
    /// Interface for the ReleasesApiClient
    /// </summary>
    internal interface IReleasesApiClient
    {
            /// <summary>
            /// Async Operation.
            /// Create release.
            /// </summary>
            /// <param name="request">Request object for CreateRelease.</param>
            /// <param name="operationConfiguration">Configuration for CreateRelease.</param>
            /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InlineResponse200LastRelease>> CreateReleaseAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.CreateReleaseRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Create release.
            /// </summary>
            /// <param name="request">Request object for CreateReleaseEnv.</param>
            /// <param name="operationConfiguration">Configuration for CreateReleaseEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InlineResponse200LastRelease>> CreateReleaseEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.CreateReleaseEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get detail error information.
            /// </summary>
            /// <param name="request">Request object for GetErrorDetails.</param>
            /// <param name="operationConfiguration">Configuration for GetErrorDetails.</param>
            /// <returns>Task for a Response object containing status code, headers, and byte[] object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<byte[]>> GetErrorDetailsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetErrorDetailsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get detail error information.
            /// </summary>
            /// <param name="request">Request object for GetErrorDetailsEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetErrorDetailsEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and byte[] object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<byte[]>> GetErrorDetailsEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetErrorDetailsEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get release.
            /// </summary>
            /// <param name="request">Request object for GetRelease.</param>
            /// <param name="operationConfiguration">Configuration for GetRelease.</param>
            /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InlineResponse200LastRelease>> GetReleaseAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get release by badge.
            /// </summary>
            /// <param name="request">Request object for GetReleaseByBadge.</param>
            /// <param name="operationConfiguration">Configuration for GetReleaseByBadge.</param>
            /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InlineResponse200LastRelease>> GetReleaseByBadgeAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseByBadgeRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get release by badge.
            /// </summary>
            /// <param name="request">Request object for GetReleaseByBadgeEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetReleaseByBadgeEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InlineResponse200LastRelease>> GetReleaseByBadgeEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseByBadgeEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get counts of changes between releases.
            /// </summary>
            /// <param name="request">Request object for GetReleaseDiff.</param>
            /// <param name="operationConfiguration">Configuration for GetReleaseDiff.</param>
            /// <returns>Task for a Response object containing status code, headers, and InlineResponse200Changes object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InlineResponse200Changes>> GetReleaseDiffAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseDiffRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get changed entries between releases.
            /// </summary>
            /// <param name="request">Request object for GetReleaseDiffEntries.</param>
            /// <param name="operationConfiguration">Configuration for GetReleaseDiffEntries.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse2002&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<InlineResponse2002>>> GetReleaseDiffEntriesAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseDiffEntriesRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get changed entries between releases.
            /// </summary>
            /// <param name="request">Request object for GetReleaseDiffEntriesEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetReleaseDiffEntriesEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse2002&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<InlineResponse2002>>> GetReleaseDiffEntriesEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseDiffEntriesEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get counts of changes between releases.
            /// </summary>
            /// <param name="request">Request object for GetReleaseDiffEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetReleaseDiffEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and InlineResponse200Changes object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InlineResponse200Changes>> GetReleaseDiffEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseDiffEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get release entries.
            /// </summary>
            /// <param name="request">Request object for GetReleaseEntries.</param>
            /// <param name="operationConfiguration">Configuration for GetReleaseEntries.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse2002&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<InlineResponse2002>>> GetReleaseEntriesAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseEntriesRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get badged release entries.
            /// </summary>
            /// <param name="request">Request object for GetReleaseEntriesByBadge.</param>
            /// <param name="operationConfiguration">Configuration for GetReleaseEntriesByBadge.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse2002&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<InlineResponse2002>>> GetReleaseEntriesByBadgeAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseEntriesByBadgeRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get badged release entries.
            /// </summary>
            /// <param name="request">Request object for GetReleaseEntriesByBadgeEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetReleaseEntriesByBadgeEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse2002&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<InlineResponse2002>>> GetReleaseEntriesByBadgeEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseEntriesByBadgeEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get release entries.
            /// </summary>
            /// <param name="request">Request object for GetReleaseEntriesEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetReleaseEntriesEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse2002&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<InlineResponse2002>>> GetReleaseEntriesEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseEntriesEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get release.
            /// </summary>
            /// <param name="request">Request object for GetReleaseEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetReleaseEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InlineResponse200LastRelease>> GetReleaseEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get releases for bucket.
            /// </summary>
            /// <param name="request">Request object for GetReleases.</param>
            /// <param name="operationConfiguration">Configuration for GetReleases.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse200LastRelease&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<InlineResponse200LastRelease>>> GetReleasesAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleasesRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get releases for bucket.
            /// </summary>
            /// <param name="request">Request object for GetReleasesEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetReleasesEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse200LastRelease&gt; object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<List<InlineResponse200LastRelease>>> GetReleasesEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleasesEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get stats for a release.
            /// </summary>
            /// <param name="request">Request object for GetStats.</param>
            /// <param name="operationConfiguration">Configuration for GetStats.</param>
            /// <returns>Task for a Response object containing status code, headers, and InlineResponse2008 object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InlineResponse2008>> GetStatsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetStatsRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Get stats for a release.
            /// </summary>
            /// <param name="request">Request object for GetStatsEnv.</param>
            /// <param name="operationConfiguration">Configuration for GetStatsEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and InlineResponse2008 object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InlineResponse2008>> GetStatsEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetStatsEnvRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update release.
            /// </summary>
            /// <param name="request">Request object for UpdateRelease.</param>
            /// <param name="operationConfiguration">Configuration for UpdateRelease.</param>
            /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InlineResponse200LastRelease>> UpdateReleaseAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.UpdateReleaseRequest request, Configuration operationConfiguration = null);

            /// <summary>
            /// Async Operation.
            /// Update release.
            /// </summary>
            /// <param name="request">Request object for UpdateReleaseEnv.</param>
            /// <param name="operationConfiguration">Configuration for UpdateReleaseEnv.</param>
            /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
            /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
            Task<Response<InlineResponse200LastRelease>> UpdateReleaseEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.UpdateReleaseEnvRequest request, Configuration operationConfiguration = null);

    }

    ///<inheritdoc cref="IReleasesApiClient"/>
    internal class ReleasesApiClient : BaseApiClient, IReleasesApiClient
    {
        private const int _baseTimeout = 10;
        private Configuration _configuration;
        /// <summary>
        /// Accessor for the client configuration object. This returns a merge
        /// between the current configuration and the global configuration to
        /// ensure the correct combination of headers and a base path (if it is
        /// set) are returned.
        /// </summary>
        public Configuration Configuration
        {
            get {
                // We return a merge between the current configuration and the
                // global configuration to ensure we have the correct
                // combination of headers and a base path (if it is set).
                Configuration globalConfiguration = new Configuration("https://services.unity.com", 10, 4, null);
                return Configuration.MergeConfigurations(_configuration, globalConfiguration);
            }
            set { _configuration = value; }
        }

        /// <summary>
        /// ReleasesApiClient Constructor.
        /// </summary>
        /// <param name="httpClient">The HttpClient for ReleasesApiClient.</param>
        /// <param name="configuration"> ReleasesApiClient Configuration object.</param>
        public ReleasesApiClient(IHttpClient httpClient,
            Configuration configuration = null) : base(httpClient)
        {
            // We don't need to worry about the configuration being null at
            // this stage, we will check this in the accessor.
            _configuration = configuration;

            
        }


        /// <summary>
        /// Async Operation.
        /// Create release.
        /// </summary>
        /// <param name="request">Request object for CreateRelease.</param>
        /// <param name="operationConfiguration">Configuration for CreateRelease.</param>
        /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InlineResponse200LastRelease>> CreateReleaseAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.CreateReleaseRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InlineResponse200LastRelease)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InlineResponse200LastRelease>(response, statusCodeToTypeMap);
            return new Response<InlineResponse200LastRelease>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Create release.
        /// </summary>
        /// <param name="request">Request object for CreateReleaseEnv.</param>
        /// <param name="operationConfiguration">Configuration for CreateReleaseEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InlineResponse200LastRelease>> CreateReleaseEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.CreateReleaseEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InlineResponse200LastRelease)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("POST",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InlineResponse200LastRelease>(response, statusCodeToTypeMap);
            return new Response<InlineResponse200LastRelease>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get detail error information.
        /// </summary>
        /// <param name="request">Request object for GetErrorDetails.</param>
        /// <param name="operationConfiguration">Configuration for GetErrorDetails.</param>
        /// <returns>Task for a Response object containing status code, headers, and byte[] object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<byte[]>> GetErrorDetailsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetErrorDetailsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(byte[])   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<byte[]>(response, statusCodeToTypeMap);
            return new Response<byte[]>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get detail error information.
        /// </summary>
        /// <param name="request">Request object for GetErrorDetailsEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetErrorDetailsEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and byte[] object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<byte[]>> GetErrorDetailsEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetErrorDetailsEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(byte[])   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<byte[]>(response, statusCodeToTypeMap);
            return new Response<byte[]>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get release.
        /// </summary>
        /// <param name="request">Request object for GetRelease.</param>
        /// <param name="operationConfiguration">Configuration for GetRelease.</param>
        /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InlineResponse200LastRelease>> GetReleaseAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InlineResponse200LastRelease)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InlineResponse200LastRelease>(response, statusCodeToTypeMap);
            return new Response<InlineResponse200LastRelease>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get release by badge.
        /// </summary>
        /// <param name="request">Request object for GetReleaseByBadge.</param>
        /// <param name="operationConfiguration">Configuration for GetReleaseByBadge.</param>
        /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InlineResponse200LastRelease>> GetReleaseByBadgeAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseByBadgeRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InlineResponse200LastRelease)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InlineResponse200LastRelease>(response, statusCodeToTypeMap);
            return new Response<InlineResponse200LastRelease>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get release by badge.
        /// </summary>
        /// <param name="request">Request object for GetReleaseByBadgeEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetReleaseByBadgeEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InlineResponse200LastRelease>> GetReleaseByBadgeEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseByBadgeEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InlineResponse200LastRelease)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InlineResponse200LastRelease>(response, statusCodeToTypeMap);
            return new Response<InlineResponse200LastRelease>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get counts of changes between releases.
        /// </summary>
        /// <param name="request">Request object for GetReleaseDiff.</param>
        /// <param name="operationConfiguration">Configuration for GetReleaseDiff.</param>
        /// <returns>Task for a Response object containing status code, headers, and InlineResponse200Changes object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InlineResponse200Changes>> GetReleaseDiffAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseDiffRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InlineResponse200Changes)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InlineResponse200Changes>(response, statusCodeToTypeMap);
            return new Response<InlineResponse200Changes>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get changed entries between releases.
        /// </summary>
        /// <param name="request">Request object for GetReleaseDiffEntries.</param>
        /// <param name="operationConfiguration">Configuration for GetReleaseDiffEntries.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse2002&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<InlineResponse2002>>> GetReleaseDiffEntriesAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseDiffEntriesRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<InlineResponse2002>)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<InlineResponse2002>>(response, statusCodeToTypeMap);
            return new Response<List<InlineResponse2002>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get changed entries between releases.
        /// </summary>
        /// <param name="request">Request object for GetReleaseDiffEntriesEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetReleaseDiffEntriesEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse2002&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<InlineResponse2002>>> GetReleaseDiffEntriesEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseDiffEntriesEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<InlineResponse2002>)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<InlineResponse2002>>(response, statusCodeToTypeMap);
            return new Response<List<InlineResponse2002>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get counts of changes between releases.
        /// </summary>
        /// <param name="request">Request object for GetReleaseDiffEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetReleaseDiffEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and InlineResponse200Changes object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InlineResponse200Changes>> GetReleaseDiffEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseDiffEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InlineResponse200Changes)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InlineResponse200Changes>(response, statusCodeToTypeMap);
            return new Response<InlineResponse200Changes>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get release entries.
        /// </summary>
        /// <param name="request">Request object for GetReleaseEntries.</param>
        /// <param name="operationConfiguration">Configuration for GetReleaseEntries.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse2002&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<InlineResponse2002>>> GetReleaseEntriesAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseEntriesRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<InlineResponse2002>)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<InlineResponse2002>>(response, statusCodeToTypeMap);
            return new Response<List<InlineResponse2002>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get badged release entries.
        /// </summary>
        /// <param name="request">Request object for GetReleaseEntriesByBadge.</param>
        /// <param name="operationConfiguration">Configuration for GetReleaseEntriesByBadge.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse2002&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<InlineResponse2002>>> GetReleaseEntriesByBadgeAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseEntriesByBadgeRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<InlineResponse2002>)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<InlineResponse2002>>(response, statusCodeToTypeMap);
            return new Response<List<InlineResponse2002>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get badged release entries.
        /// </summary>
        /// <param name="request">Request object for GetReleaseEntriesByBadgeEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetReleaseEntriesByBadgeEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse2002&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<InlineResponse2002>>> GetReleaseEntriesByBadgeEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseEntriesByBadgeEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<InlineResponse2002>)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<InlineResponse2002>>(response, statusCodeToTypeMap);
            return new Response<List<InlineResponse2002>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get release entries.
        /// </summary>
        /// <param name="request">Request object for GetReleaseEntriesEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetReleaseEntriesEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse2002&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<InlineResponse2002>>> GetReleaseEntriesEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseEntriesEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<InlineResponse2002>)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<InlineResponse2002>>(response, statusCodeToTypeMap);
            return new Response<List<InlineResponse2002>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get release.
        /// </summary>
        /// <param name="request">Request object for GetReleaseEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetReleaseEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InlineResponse200LastRelease>> GetReleaseEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleaseEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InlineResponse200LastRelease)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InlineResponse200LastRelease>(response, statusCodeToTypeMap);
            return new Response<InlineResponse200LastRelease>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get releases for bucket.
        /// </summary>
        /// <param name="request">Request object for GetReleases.</param>
        /// <param name="operationConfiguration">Configuration for GetReleases.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse200LastRelease&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<InlineResponse200LastRelease>>> GetReleasesAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleasesRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<InlineResponse200LastRelease>)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<InlineResponse200LastRelease>>(response, statusCodeToTypeMap);
            return new Response<List<InlineResponse200LastRelease>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get releases for bucket.
        /// </summary>
        /// <param name="request">Request object for GetReleasesEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetReleasesEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and List&lt;InlineResponse200LastRelease&gt; object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<List<InlineResponse200LastRelease>>> GetReleasesEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetReleasesEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(List<InlineResponse200LastRelease>)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<List<InlineResponse200LastRelease>>(response, statusCodeToTypeMap);
            return new Response<List<InlineResponse200LastRelease>>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get stats for a release.
        /// </summary>
        /// <param name="request">Request object for GetStats.</param>
        /// <param name="operationConfiguration">Configuration for GetStats.</param>
        /// <returns>Task for a Response object containing status code, headers, and InlineResponse2008 object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InlineResponse2008>> GetStatsAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetStatsRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InlineResponse2008)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InlineResponse2008>(response, statusCodeToTypeMap);
            return new Response<InlineResponse2008>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Get stats for a release.
        /// </summary>
        /// <param name="request">Request object for GetStatsEnv.</param>
        /// <param name="operationConfiguration">Configuration for GetStatsEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and InlineResponse2008 object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InlineResponse2008>> GetStatsEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.GetStatsEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InlineResponse2008)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("GET",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InlineResponse2008>(response, statusCodeToTypeMap);
            return new Response<InlineResponse2008>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update release.
        /// </summary>
        /// <param name="request">Request object for UpdateRelease.</param>
        /// <param name="operationConfiguration">Configuration for UpdateRelease.</param>
        /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InlineResponse200LastRelease>> UpdateReleaseAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.UpdateReleaseRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InlineResponse200LastRelease)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InlineResponse200LastRelease>(response, statusCodeToTypeMap);
            return new Response<InlineResponse200LastRelease>(response, handledResponse);
        }


        /// <summary>
        /// Async Operation.
        /// Update release.
        /// </summary>
        /// <param name="request">Request object for UpdateReleaseEnv.</param>
        /// <param name="operationConfiguration">Configuration for UpdateReleaseEnv.</param>
        /// <returns>Task for a Response object containing status code, headers, and InlineResponse200LastRelease object.</returns>
        /// <exception cref="Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Http.HttpException">An exception containing the HttpClientResponse with headers, response code, and string of error.</exception>
        public async Task<Response<InlineResponse200LastRelease>> UpdateReleaseEnvAsync(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Ccd.Releases.UpdateReleaseEnvRequest request,
            Configuration operationConfiguration = null)
        {
            var statusCodeToTypeMap = new Dictionary<string, System.Type>() { {"200", typeof(InlineResponse200LastRelease)   },{"400", typeof(InlineResponse400)   },{"401", typeof(InlineResponse401)   },{"403", typeof(InlineResponse403)   },{"404", typeof(InlineResponse404)   },{"429", typeof(InlineResponse429)   },{"500", typeof(InlineResponse500)   },{"503", typeof(InlineResponse503)   } };

            // Merge the operation/request level configuration with the client level configuration.
            var finalConfiguration = Configuration.MergeConfigurations(operationConfiguration, Configuration);

            var response = await HttpClient.MakeRequestAsync("PUT",
                request.ConstructUrl(finalConfiguration.BasePath),
                request.ConstructBody(),
                request.ConstructHeaders(finalConfiguration),
                finalConfiguration.RequestTimeout ?? _baseTimeout);

            var handledResponse = ResponseHandler.HandleAsyncResponse<InlineResponse200LastRelease>(response, statusCodeToTypeMap);
            return new Response<InlineResponse200LastRelease>(response, handledResponse);
        }

    }
}
