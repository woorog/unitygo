//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.Scripting;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models;
using Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Scheduler;


namespace Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Fleets
{
    internal static class JsonSerialization
    {
        public static byte[] Serialize<T>(T obj)
        {
            return Encoding.UTF8.GetBytes(SerializeToString(obj));
        }

        public static string SerializeToString<T>(T obj)
        {
            return JsonConvert.SerializeObject(obj, new JsonSerializerSettings{ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore});
        }
    }

    /// <summary>
    /// FleetsApiBaseRequest class
    /// </summary>
    [Preserve]
    internal class FleetsApiBaseRequest
    {
        /// <summary>
        /// Helper function to add a provided key and value to the provided
        /// query params and to escape the values correctly if it is a URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <param name="value">The value to be added.</param>
        /// <returns>Returns a `List/<string/>` with the `key` and `value` added to the provided `queryParams`.</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, string key, string value)
        {
            key = UnityWebRequest.EscapeURL(key);
            value = UnityWebRequest.EscapeURL(value);
            queryParams.Add($"{key}={value}");

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided key and list of values to the
        /// provided query params and to escape the values correctly if it is a
        /// URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <param name="values">List of values to be added.</param>
        /// <param name="style">string for defining the style, currently unused.</param>
        /// <param name="explode">True if query params should be escaped and added separately.</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, string key, List<string> values, string style, bool explode)
        {
            if (explode)
            {
                foreach(var value in values)
                {
                    string escapedValue = UnityWebRequest.EscapeURL(value);
                    queryParams.Add($"{UnityWebRequest.EscapeURL(key)}={escapedValue}");
                }
            }
            else
            {
                string paramString = $"{UnityWebRequest.EscapeURL(key)}=";
                foreach(var value in values)
                {
                    paramString += UnityWebRequest.EscapeURL(value) + ",";
                }
                paramString = paramString.Remove(paramString.Length - 1);
                queryParams.Add(paramString);
            }

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided map of keys and values, representing a model, to the
        /// provided query params.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="modelVars">A `Dictionary` representing the vars of the model</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams(List<string> queryParams, Dictionary<string, string> modelVars)
        {
            foreach(var key in modelVars.Keys)
            {
                string escapedValue = UnityWebRequest.EscapeURL(modelVars[key]);
                queryParams.Add($"{UnityWebRequest.EscapeURL(key)}={escapedValue}");
            }

            return queryParams;
        }

        /// <summary>
        /// Helper function to add a provided key and value to the provided
        /// query params and to escape the values correctly if it is a URL.
        /// </summary>
        /// <param name="queryParams">A `List/<string/>` of the query parameters.</param>
        /// <param name="key">The key to be added.</param>
        /// <typeparam name="T">The type of the value to be added.</typeparam>
        /// <param name="value">The value to be added.</param>
        /// <returns>Returns a `List/<string/>`</returns>
        [Preserve]
        public List<string> AddParamsToQueryParams<T>(List<string> queryParams, string key, T value)
        {
            if (queryParams == null)
            {
                queryParams = new List<string>();
            }

            key = UnityWebRequest.EscapeURL(key);
            string valueString = UnityWebRequest.EscapeURL(value.ToString());
            queryParams.Add($"{key}={valueString}");
            return queryParams;
        }

        /// <summary>
        /// Constructs a string representing an array path parameter.
        /// </summary>
        /// <param name="pathParam">The list of values to convert to string.</param>
        /// <returns>String representing the param.</returns>
        [Preserve]
        public string GetPathParamString(List<string> pathParam)
        {
            string paramString = "";
            foreach(var value in pathParam)
            {
                paramString += UnityWebRequest.EscapeURL(value) + ",";
            }
            paramString = paramString.Remove(paramString.Length - 1);
            return paramString;
        }

        /// <summary>
        /// Constructs the body of the request based on IO stream.
        /// </summary>
        /// <param name="stream">The IO stream to use.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(System.IO.Stream stream)
        {
            if (stream != null)
            {
                using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
                {
                    stream.CopyTo(ms);
                    return ms.ToArray();
                }
            }
            return null;
        }

        /// <summary>
        /// Construct the request body based on string value.
        /// </summary>
        /// <param name="s">The input body.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(string s)
        {
            return System.Text.Encoding.UTF8.GetBytes(s);
        }

        /// <summary>
        /// Construct request body based on generic object.
        /// </summary>
        /// <param name="o">The object to use.</param>
        /// <returns>Byte array representing the body.</returns>
        public byte[] ConstructBody(object o)
        {
            return JsonSerialization.Serialize(o);
        }

        /// <summary>
        /// Generate an accept header.
        /// </summary>
        /// <param name="accepts">list of accepts objects.</param>
        /// <returns>The generated accept header.</returns>
        public string GenerateAcceptHeader(string[] accepts)
        {
            if (accepts.Length == 0)
            {
                return null;
            }
            for (int i = 0; i < accepts.Length; ++i)
            {
                if (string.Equals(accepts[i], "application/json", System.StringComparison.OrdinalIgnoreCase))
                {
                    return "application/json";
                }
            }
            return string.Join(", ", accepts);
        }

        private static readonly Regex JsonRegex = new Regex(@"application\/json(;\s)?((charset=utf8|q=[0-1]\.\d)(\s)?)*");

        /// <summary>
        /// Generate Content Type Header.
        /// </summary>
        /// <param name="contentTypes">The content types.</param>
        /// <returns>The Content Type Header.</returns>
        public string GenerateContentTypeHeader(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
            {
                return null;
            }

            for(int i = 0; i < contentTypes.Length; ++i)
            {
                if (!string.IsNullOrWhiteSpace(contentTypes[i]) && JsonRegex.IsMatch(contentTypes[i]))
                {
                    return contentTypes[i];
                }
            }
            return contentTypes[0];
        }

        /// <summary>
        /// Generate multipart form file section.
        /// </summary>
        /// <param name="paramName">The parameter name.</param>
        /// <param name="stream">The file stream to use.</param>
        /// <param name="contentType">The content type.</param>
        /// <returns>Returns a multipart form section.</returns>
        public IMultipartFormSection GenerateMultipartFormFileSection(string paramName, System.IO.FileStream stream, string contentType)
        {
            return new MultipartFormFileSection(paramName, ConstructBody(stream), GetFileName(stream.Name), contentType);
        }

        /// <summary>
        /// Generate multipart form file section.
        /// </summary>
        /// <param name="paramName">The parameter name.</param>
        /// <param name="stream">The IO stream to use.</param>
        /// <param name="contentType">The content type.</param>
        /// <returns>Returns a multipart form section.</returns>
        public IMultipartFormSection GenerateMultipartFormFileSection(string paramName, System.IO.Stream stream, string contentType)
        {
            return new MultipartFormFileSection(paramName, ConstructBody(stream), Guid.NewGuid().ToString(), contentType);
        }

        private string GetFileName(string filePath)
        {
            return System.IO.Path.GetFileName(filePath);
        }
    }

    /// <summary>
    /// AddFleetRegionRequest
    /// Add fleet region
    /// </summary>
    [Preserve]
    internal class AddFleetRegionRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        /// <summary>Accessor for addRegionRequest </summary>
        [Preserve]
        public Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models.AddRegionRequest AddRegionRequest { get; }
        string PathAndQueryParams;

        /// <summary>
        /// AddFleetRegion Request Object.
        /// Add fleet region
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetId">Fleet ID</param>
        /// <param name="addRegionRequest">AddRegionRequest param</param>
        [Preserve]
        public AddFleetRegionRequest(System.Guid projectId, System.Guid environmentId, System.Guid fleetId, Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models.AddRegionRequest addRegionRequest = default(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models.AddRegionRequest))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetId = fleetId;

            AddRegionRequest = addRegionRequest;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/{fleetId}/regions";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            if(AddRegionRequest != null)
            {
                return ConstructBody(AddRegionRequest);
            }
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// CreateFleetRequest
    /// Create a fleet
    /// </summary>
    [Preserve]
    internal class CreateFleetRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetCreateRequest </summary>
        [Preserve]
        public Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models.FleetCreateRequest FleetCreateRequest { get; }
        string PathAndQueryParams;

        /// <summary>
        /// CreateFleet Request Object.
        /// Create a fleet
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetCreateRequest">FleetCreateRequest param</param>
        [Preserve]
        public CreateFleetRequest(System.Guid projectId, System.Guid environmentId, Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models.FleetCreateRequest fleetCreateRequest = default(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models.FleetCreateRequest))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetCreateRequest = fleetCreateRequest;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            if(FleetCreateRequest != null)
            {
                return ConstructBody(FleetCreateRequest);
            }
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "POST";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// DeleteFleetRequest
    /// Delete a fleet
    /// </summary>
    [Preserve]
    internal class DeleteFleetRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        /// <summary>Accessor for dryRun </summary>
        [Preserve]
        public bool? DryRun { get; }
        string PathAndQueryParams;

        /// <summary>
        /// DeleteFleet Request Object.
        /// Delete a fleet
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetId">Fleet ID</param>
        /// <param name="dryRun">Dry run the request.</param>
        [Preserve]
        public DeleteFleetRequest(System.Guid projectId, System.Guid environmentId, System.Guid fleetId, bool? dryRun = default(bool?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetId = fleetId;

            DryRun = dryRun;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/{fleetId}";

            List<string> queryParams = new List<string>();

            var dryRunStringValue = DryRun.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "dryRun", dryRunStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "DELETE";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetAvailableFleetRegionsRequest
    /// Available fleet regions list
    /// </summary>
    [Preserve]
    internal class GetAvailableFleetRegionsRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetAvailableFleetRegions Request Object.
        /// Available fleet regions list
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetId">Fleet ID</param>
        [Preserve]
        public GetAvailableFleetRegionsRequest(System.Guid projectId, System.Guid environmentId, System.Guid fleetId)
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetId = fleetId;

            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/{fleetId}/available-regions";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetFleetRequest
    /// View a fleet
    /// </summary>
    [Preserve]
    internal class GetFleetRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetFleet Request Object.
        /// View a fleet
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetId">Fleet ID</param>
        [Preserve]
        public GetFleetRequest(System.Guid projectId, System.Guid environmentId, System.Guid fleetId)
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetId = fleetId;

            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/{fleetId}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetFleetCCURequest
    /// View fleet CCU
    /// </summary>
    [Preserve]
    internal class GetFleetCCURequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        /// <summary>Accessor for regionId </summary>
        [Preserve]
        public System.Guid RegionId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetFleetCCU Request Object.
        /// View fleet CCU
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetId">Fleet ID</param>
        /// <param name="regionId">Region UUID on which to filter.</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the fleetQueryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetFleetCCURequest(System.Guid projectId, System.Guid environmentId, System.Guid fleetId, System.Guid regionId = default(System.Guid), string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetId = fleetId;

            RegionId = regionId;
            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/{fleetId}/ccu";

            List<string> queryParams = new List<string>();

            if(RegionId != Guid.Empty)
            {
                queryParams = AddParamsToQueryParams(queryParams, "regionId", RegionId);
            }
            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetFleetCrashesRequest
    /// View fleet crashes
    /// </summary>
    [Preserve]
    internal class GetFleetCrashesRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        /// <summary>Accessor for regionId </summary>
        [Preserve]
        public System.Guid RegionId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetFleetCrashes Request Object.
        /// View fleet crashes
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetId">Fleet ID</param>
        /// <param name="regionId">Region UUID on which to filter.</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the fleetQueryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetFleetCrashesRequest(System.Guid projectId, System.Guid environmentId, System.Guid fleetId, System.Guid regionId = default(System.Guid), string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetId = fleetId;

            RegionId = regionId;
            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/{fleetId}/crashes";

            List<string> queryParams = new List<string>();

            if(RegionId != Guid.Empty)
            {
                queryParams = AddParamsToQueryParams(queryParams, "regionId", RegionId);
            }
            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetFleetEventsRequest
    /// View fleet events
    /// </summary>
    [Preserve]
    internal class GetFleetEventsRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        /// <summary>Accessor for regionId </summary>
        [Preserve]
        public System.Guid RegionId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetFleetEvents Request Object.
        /// View fleet events
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetId">Fleet ID</param>
        /// <param name="regionId">Region UUID on which to filter.</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the fleetQueryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetFleetEventsRequest(System.Guid projectId, System.Guid environmentId, System.Guid fleetId, System.Guid regionId = default(System.Guid), string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetId = fleetId;

            RegionId = regionId;
            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/{fleetId}/events";

            List<string> queryParams = new List<string>();

            if(RegionId != Guid.Empty)
            {
                queryParams = AddParamsToQueryParams(queryParams, "regionId", RegionId);
            }
            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetFleetServerAllocationsRequest
    /// View fleet Server Allocations
    /// </summary>
    [Preserve]
    internal class GetFleetServerAllocationsRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        /// <summary>Accessor for regionId </summary>
        [Preserve]
        public System.Guid RegionId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetFleetServerAllocations Request Object.
        /// View fleet Server Allocations
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetId">Fleet ID</param>
        /// <param name="regionId">Region UUID on which to filter.</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the fleetQueryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetFleetServerAllocationsRequest(System.Guid projectId, System.Guid environmentId, System.Guid fleetId, System.Guid regionId = default(System.Guid), string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetId = fleetId;

            RegionId = regionId;
            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/{fleetId}/server-allocations";

            List<string> queryParams = new List<string>();

            if(RegionId != Guid.Empty)
            {
                queryParams = AddParamsToQueryParams(queryParams, "regionId", RegionId);
            }
            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetFleetServerDensityRequest
    /// View fleet Server Density
    /// </summary>
    [Preserve]
    internal class GetFleetServerDensityRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        /// <summary>Accessor for regionId </summary>
        [Preserve]
        public System.Guid RegionId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetFleetServerDensity Request Object.
        /// View fleet Server Density
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetId">Fleet ID</param>
        /// <param name="regionId">Region UUID on which to filter.</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the fleetQueryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetFleetServerDensityRequest(System.Guid projectId, System.Guid environmentId, System.Guid fleetId, System.Guid regionId = default(System.Guid), string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetId = fleetId;

            RegionId = regionId;
            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/{fleetId}/server-density";

            List<string> queryParams = new List<string>();

            if(RegionId != Guid.Empty)
            {
                queryParams = AddParamsToQueryParams(queryParams, "regionId", RegionId);
            }
            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetFleetSlotsRequest
    /// View allocated/unallocated Slots
    /// </summary>
    [Preserve]
    internal class GetFleetSlotsRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        /// <summary>Accessor for regionId </summary>
        [Preserve]
        public System.Guid RegionId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetFleetSlots Request Object.
        /// View allocated/unallocated Slots
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetId">Fleet ID</param>
        /// <param name="regionId">Region UUID on which to filter.</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the fleetQueryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetFleetSlotsRequest(System.Guid projectId, System.Guid environmentId, System.Guid fleetId, System.Guid regionId = default(System.Guid), string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetId = fleetId;

            RegionId = regionId;
            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/{fleetId}/slots";

            List<string> queryParams = new List<string>();

            if(RegionId != Guid.Empty)
            {
                queryParams = AddParamsToQueryParams(queryParams, "regionId", RegionId);
            }
            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetFleetUsersPerBuildConfigurationRequest
    /// View Fleet Users Per Build Configuration
    /// </summary>
    [Preserve]
    internal class GetFleetUsersPerBuildConfigurationRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        /// <summary>Accessor for regionId </summary>
        [Preserve]
        public System.Guid RegionId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetFleetUsersPerBuildConfiguration Request Object.
        /// View Fleet Users Per Build Configuration
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetId">Fleet ID</param>
        /// <param name="regionId">Region UUID on which to filter.</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the fleetQueryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetFleetUsersPerBuildConfigurationRequest(System.Guid projectId, System.Guid environmentId, System.Guid fleetId, System.Guid regionId = default(System.Guid), string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetId = fleetId;

            RegionId = regionId;
            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/{fleetId}/users-per-build-configuration";

            List<string> queryParams = new List<string>();

            if(RegionId != Guid.Empty)
            {
                queryParams = AddParamsToQueryParams(queryParams, "regionId", RegionId);
            }
            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetProjectCCURequest
    /// View project CCU
    /// </summary>
    [Preserve]
    internal class GetProjectCCURequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetProjectCCU Request Object.
        /// View project CCU
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the fleetQueryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetProjectCCURequest(System.Guid projectId, System.Guid environmentId, string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/analytics/ccu";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetProjectCCUStatsRequest
    /// View project CCU stats
    /// </summary>
    [Preserve]
    internal class GetProjectCCUStatsRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetProjectCCUStats Request Object.
        /// View project CCU stats
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the fleetQueryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetProjectCCUStatsRequest(System.Guid projectId, System.Guid environmentId, string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/analytics/ccustats";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetProjectCrashesRequest
    /// View project crashes
    /// </summary>
    [Preserve]
    internal class GetProjectCrashesRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetProjectCrashes Request Object.
        /// View project crashes
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the fleetQueryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetProjectCrashesRequest(System.Guid projectId, System.Guid environmentId, string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/analytics/crashes";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// GetProjectEventsRequest
    /// View project events
    /// </summary>
    [Preserve]
    internal class GetProjectEventsRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for period </summary>
        [Preserve]
        public string Period { get; }
        /// <summary>Accessor for start </summary>
        [Preserve]
        public DateTime? Start { get; }
        /// <summary>Accessor for end </summary>
        [Preserve]
        public DateTime? End { get; }
        string PathAndQueryParams;

        /// <summary>
        /// GetProjectEvents Request Object.
        /// View project events
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="period">Period for which analytics should be fetched.</param>
        /// <param name="start">Start timestamp for which analytics should be fetched. (Optional) Exclusively paired with the fleetQueryAnalyticsEnd parameter.</param>
        /// <param name="end">End timestamp for which analytics should be fetched. (Optional) Defaults to 'now' if undefined.</param>
        [Preserve]
        public GetProjectEventsRequest(System.Guid projectId, System.Guid environmentId, string period = "day", DateTime? start = default(DateTime?), DateTime? end = default(DateTime?))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            Period = period;
            Start = start;
            End = end;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/analytics/events";

            List<string> queryParams = new List<string>();

            if(!string.IsNullOrEmpty(Period))
            {
                queryParams = AddParamsToQueryParams(queryParams, "period", Period);
            }
            var startStringValue = Start.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "start", startStringValue);
            var endStringValue = End.ToString();
            queryParams = AddParamsToQueryParams(queryParams, "end", endStringValue);
            if (queryParams.Count > 0)
            {
                PathAndQueryParams = $"{PathAndQueryParams}?{string.Join("&", queryParams)}";
            }
        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// ListFleetsRequest
    /// List fleets
    /// </summary>
    [Preserve]
    internal class ListFleetsRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// ListFleets Request Object.
        /// List fleets
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        [Preserve]
        public ListFleetsRequest(System.Guid projectId, System.Guid environmentId)
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// ListTemplateFleetRegionsRequest
    /// List template fleet regions
    /// </summary>
    [Preserve]
    internal class ListTemplateFleetRegionsRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        string PathAndQueryParams;

        /// <summary>
        /// ListTemplateFleetRegions Request Object.
        /// List template fleet regions
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        [Preserve]
        public ListTemplateFleetRegionsRequest(System.Guid projectId, System.Guid environmentId)
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/regions";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "GET";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UpdateFleetRequest
    /// Update a fleet
    /// </summary>
    [Preserve]
    internal class UpdateFleetRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        /// <summary>Accessor for fleetUpdateRequest </summary>
        [Preserve]
        public Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models.FleetUpdateRequest FleetUpdateRequest { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UpdateFleet Request Object.
        /// Update a fleet
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetId">Fleet ID</param>
        /// <param name="fleetUpdateRequest">FleetUpdateRequest param</param>
        [Preserve]
        public UpdateFleetRequest(System.Guid projectId, System.Guid environmentId, System.Guid fleetId, Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models.FleetUpdateRequest fleetUpdateRequest = default(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models.FleetUpdateRequest))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetId = fleetId;

            FleetUpdateRequest = fleetUpdateRequest;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/{fleetId}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            if(FleetUpdateRequest != null)
            {
                return ConstructBody(FleetUpdateRequest);
            }
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "PUT";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
    /// <summary>
    /// UpdateFleetRegionRequest
    /// Update fleet region settings
    /// </summary>
    [Preserve]
    internal class UpdateFleetRegionRequest : FleetsApiBaseRequest
    {
        /// <summary>Accessor for projectId </summary>
        [Preserve]
        public System.Guid ProjectId { get; }
        /// <summary>Accessor for environmentId </summary>
        [Preserve]
        public System.Guid EnvironmentId { get; }
        /// <summary>Accessor for fleetId </summary>
        [Preserve]
        public System.Guid FleetId { get; }
        /// <summary>Accessor for regionId </summary>
        [Preserve]
        public System.Guid RegionId { get; }
        /// <summary>Accessor for updateRegionRequest </summary>
        [Preserve]
        public Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models.UpdateRegionRequest UpdateRegionRequest { get; }
        string PathAndQueryParams;

        /// <summary>
        /// UpdateFleetRegion Request Object.
        /// Update fleet region settings
        /// </summary>
        /// <param name="projectId">ID of the project</param>
        /// <param name="environmentId">Environment Id of a project</param>
        /// <param name="fleetId">Fleet ID</param>
        /// <param name="regionId">Region ID</param>
        /// <param name="updateRegionRequest">UpdateRegionRequest param</param>
        [Preserve]
        public UpdateFleetRegionRequest(System.Guid projectId, System.Guid environmentId, System.Guid fleetId, System.Guid regionId, Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models.UpdateRegionRequest updateRegionRequest = default(Unity.Services.Multiplay.Authoring.Editor.AdminApis.Fleets.Models.UpdateRegionRequest))
        {
            ProjectId = projectId;

            EnvironmentId = environmentId;

            FleetId = fleetId;

            RegionId = regionId;

            UpdateRegionRequest = updateRegionRequest;
            PathAndQueryParams = $"/api/multiplay/fleets/v4/projects/{projectId}/environments/{environmentId}/fleets/{fleetId}/regions/{regionId}";


        }

        /// <summary>
        /// Helper function for constructing URL from request base path and
        /// query params.
        /// </summary>
        /// <param name="requestBasePath"></param>
        /// <returns></returns>
        public string ConstructUrl(string requestBasePath)
        {
            return requestBasePath + PathAndQueryParams;
        }

        /// <summary>
        /// Helper for constructing the request body.
        /// </summary>
        /// <returns>A list of IMultipartFormSection representing the request body.</returns>
        public byte[] ConstructBody()
        {
            if(UpdateRegionRequest != null)
            {
                return ConstructBody(UpdateRegionRequest);
            }
            return null;
        }

        /// <summary>
        /// Helper function for constructing the headers.
        /// </summary>
        /// <param name="operationConfiguration">The operation configuration to use.</param>
        /// <returns>A dictionary representing the request headers.</returns>
        public Dictionary<string, string> ConstructHeaders(Configuration operationConfiguration = null)
        {
            var headers = new Dictionary<string, string>();

            // Analytics headers
            headers.Add("Unity-Client-Version", Application.unityVersion);
            headers.Add("Unity-Client-Mode", Scheduler.EngineStateHelper.IsPlaying ? "play" : "edit");

            string[] contentTypes = {
                "application/json"
            };

            string[] accepts = {
                "application/json",
                "application/problem+json"
            };

            var acceptHeader = GenerateAcceptHeader(accepts);
            if (!string.IsNullOrEmpty(acceptHeader))
            {
                headers.Add("Accept", acceptHeader);
            }
            var httpMethod = "PUT";
            var contentTypeHeader = GenerateContentTypeHeader(contentTypes);
            if (!string.IsNullOrEmpty(contentTypeHeader))
            {
                headers.Add("Content-Type", contentTypeHeader);
            }
            else if (httpMethod == "POST" || httpMethod == "PATCH")
            {
                headers.Add("Content-Type", "application/json");
            }


            // We also check if there are headers that are defined as part of
            // the request configuration.
            if (operationConfiguration != null && operationConfiguration.Headers != null)
            {
                foreach (var pair in operationConfiguration.Headers)
                {
                    headers[pair.Key] = pair.Value;
                }
            }

            return headers;
        }
    }
}
